#!/usr/bin/env node

/**
 * üîß SCRIPT DE CONFIGURACI√ìN AUTOM√ÅTICA DEL SISTEMA DE PROTECCI√ìN
 * 
 * Este script configura autom√°ticamente el sistema de protecci√≥n de documentos
 * al instalar o clonar el proyecto.
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üõ°Ô∏è CONFIGURANDO SISTEMA DE PROTECCI√ìN DE DOCUMENTOS...\n');

// Verificar si estamos en el directorio correcto
if (!fs.existsSync('package.json')) {
  console.error('‚ùå Error: No se encontr√≥ package.json. Ejecuta este script desde la ra√≠z del proyecto.');
  process.exit(1);
}

// 1. Configurar hooks de Git
console.log('1Ô∏è‚É£ Configurando hooks de Git...');
try {
  const hooksDir = '.git/hooks';
  const preCommitHook = path.join(hooksDir, 'pre-commit');
  
  const hookContent = `#!/bin/sh
# üõ°Ô∏è HOOK DE PROTECCI√ìN DE DOCUMENTOS - GRAVITO WEBSITE
# Previene la eliminaci√≥n accidental de documentos cr√≠ticos

echo "üîç Verificando documentos cr√≠ticos antes del commit..."

# Verificar si hay archivos cr√≠ticos en el staging area
CRITICAL_FILES_DELETED=false

for file in COLOR_PROTECTION_GUIDE.md COLOR_RESTRICTIONS.md FINAL_DELIVERABLE.md IMPLEMENTATION_SUMMARY.md SETUP_INSTRUCTIONS.md ADMIN_SETUP.md ANIMATION_BIBLE.md FOOTER_PROTECTION_GUIDE.md SYSTEM_OPTIMIZATION.md; do
  if git diff --cached --name-status | grep -q "^D.*$file"; then
    echo "üö® ADVERTENCIA: Se est√° eliminando un documento cr√≠tico: $file"
    CRITICAL_FILES_DELETED=true
  fi
done

# Verificar directorios protegidos
PROTECTED_DIRS_DELETED=false
for dir in src/components/dev/ src/lib/ scripts/ backups/; do
  if git diff --cached --name-status | grep -q "^D.*$dir"; then
    echo "üö® ADVERTENCIA: Se est√°n eliminando archivos de directorio protegido: $dir"
    PROTECTED_DIRS_DELETED=true
  fi
done

if [ "$CRITICAL_FILES_DELETED" = true ] || [ "$PROTECTED_DIRS_DELETED" = true ]; then
  echo "‚ùå COMMIT BLOQUEADO: Se detect√≥ eliminaci√≥n de documentos cr√≠ticos"
  echo "üí° Si es necesario eliminar estos archivos, usa: git commit --no-verify"
  echo "üí° O crea un backup primero: npm run protect:backup"
  exit 1
fi

echo "‚úÖ Verificaci√≥n completada - Commit permitido"
exit 0
`;
  
  fs.writeFileSync(preCommitHook, hookContent);
  fs.chmodSync(preCommitHook, '755');
  console.log('‚úÖ Hook pre-commit configurado');
} catch (error) {
  console.error('‚ùå Error configurando hook:', error.message);
}

// 2. Crear directorio de backups si no existe
console.log('\n2Ô∏è‚É£ Configurando directorio de backups...');
try {
  if (!fs.existsSync('backups')) {
    fs.mkdirSync('backups', { recursive: true });
    console.log('‚úÖ Directorio de backups creado');
  } else {
    console.log('‚úÖ Directorio de backups ya existe');
  }
} catch (error) {
  console.error('‚ùå Error creando directorio de backups:', error.message);
}

// 3. Crear backup inicial
console.log('\n3Ô∏è‚É£ Creando backup inicial...');
try {
  execSync('node scripts/document-protection.cjs backup', { stdio: 'inherit' });
  console.log('‚úÖ Backup inicial creado');
} catch (error) {
  console.error('‚ùå Error creando backup inicial:', error.message);
}

// 4. Verificar estado de documentos cr√≠ticos
console.log('\n4Ô∏è‚É£ Verificando estado de documentos cr√≠ticos...');
try {
  execSync('node scripts/document-protection.cjs check', { stdio: 'inherit' });
} catch (error) {
  console.error('‚ùå Error verificando documentos:', error.message);
}

// 5. Crear archivo de configuraci√≥n local
console.log('\n5Ô∏è‚É£ Creando configuraci√≥n local...');
try {
  const configContent = `# üõ°Ô∏è CONFIGURACI√ìN LOCAL DEL SISTEMA DE PROTECCI√ìN
# Este archivo fue creado autom√°ticamente

CONFIGURATION_DATE="${new Date().toISOString()}"
PROJECT_NAME="Gravito Website"
PROTECTION_ENABLED=true
AUTO_BACKUP=true
MONITORING_ENABLED=false

# Comandos √∫tiles:
# npm run protect:check    - Verificar estado
# npm run protect:backup   - Crear backup
# npm run protect:restore  - Restaurar desde backup
# npm run protect:setup    - Reconfigurar sistema
# npm run protect:monitor  - Iniciar monitoreo
`;
  
  fs.writeFileSync('.protection-config', configContent);
  console.log('‚úÖ Configuraci√≥n local creada');
} catch (error) {
  console.error('‚ùå Error creando configuraci√≥n local:', error.message);
}

// 6. Mostrar resumen
console.log('\nüéâ CONFIGURACI√ìN COMPLETADA');
console.log('\nüìã RESUMEN:');
console.log('‚úÖ Hooks de Git configurados');
console.log('‚úÖ Directorio de backups creado');
console.log('‚úÖ Backup inicial realizado');
console.log('‚úÖ Verificaci√≥n de documentos completada');
console.log('‚úÖ Configuraci√≥n local creada');

console.log('\nüõ†Ô∏è COMANDOS DISPONIBLES:');
console.log('  npm run protect:check    - Verificar estado de documentos');
console.log('  npm run protect:backup   - Crear backup de documentos cr√≠ticos');
console.log('  npm run protect:restore  - Restaurar desde el √∫ltimo backup');
console.log('  npm run protect:setup    - Reconfigurar el sistema');
console.log('  npm run protect:monitor  - Iniciar monitoreo continuo');
console.log('  npm run protect:help     - Mostrar ayuda');

console.log('\nüö® PROTECCI√ìN ACTIVA:');
console.log('  - Los commits que eliminen documentos cr√≠ticos ser√°n bloqueados');
console.log('  - Se crean backups autom√°ticos antes de cambios importantes');
console.log('  - El sistema verifica la integridad de documentos cr√≠ticos');

console.log('\nüí° CONSEJOS:');
console.log('  - Ejecuta "npm run protect:check" antes de trabajar');
console.log('  - Usa "npm run protect:backup" antes de cambios importantes');
console.log('  - Si necesitas eliminar un documento cr√≠tico, usa "git commit --no-verify"');

console.log('\nüõ°Ô∏è Sistema de protecci√≥n configurado exitosamente!');
