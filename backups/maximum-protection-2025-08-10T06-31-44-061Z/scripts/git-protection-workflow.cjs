#!/usr/bin/env node

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

// üõ°Ô∏è SISTEMA DE PROTECCI√ìN AUTOM√ÅTICA PARA GIT
// Este script ejecuta verificaciones autom√°ticas antes y despu√©s de operaciones Git

function log(message, type = 'info') {
  const timestamp = new Date().toISOString();
  const prefix = type === 'error' ? 'üö®' : type === 'warning' ? '‚ö†Ô∏è' : type === 'success' ? '‚úÖ' : type === 'critical' ? 'üî•' : 'üîç';
  console.log(`${prefix} [${timestamp}] ${message}`);
}

function executeCommand(command, description) {
  try {
    log(`Ejecutando: ${description}`, 'info');
    const result = execSync(command, { encoding: 'utf8', stdio: 'pipe' });
    log(`‚úÖ ${description} completado`, 'success');
    return { success: true, output: result };
  } catch (error) {
    log(`‚ùå Error en ${description}: ${error.message}`, 'error');
    return { success: false, error: error.message };
  }
}

function preGitOperation() {
  log('üõ°Ô∏è INICIANDO VERIFICACI√ìN PRE-GIT', 'critical');
  console.log('');
  
  const checks = [
    { command: 'node scripts/maximum-protection.cjs check', description: 'Verificaci√≥n de protecci√≥n m√°xima' },
    { command: 'node scripts/document-protection.cjs check', description: 'Verificaci√≥n de documentos cr√≠ticos' },
    { command: 'node scripts/final-verification.cjs', description: 'Verificaci√≥n final del sistema' },
    { command: 'node scripts/analyze-system.cjs', description: 'An√°lisis exhaustivo del sistema' }
  ];
  
  let allChecksPassed = true;
  
  for (const check of checks) {
    const result = executeCommand(check.command, check.description);
    if (!result.success) {
      allChecksPassed = false;
    }
    console.log('');
  }
  
  if (!allChecksPassed) {
    log('üö® VERIFICACIONES PRE-GIT FALLARON - OPERACI√ìN BLOQUEADA', 'critical');
    log('üí° ACCI√ìN REQUERIDA: Resolver problemas antes de continuar', 'critical');
    process.exit(1);
  }
  
  log('‚úÖ TODAS LAS VERIFICACIONES PRE-GIT PASARON', 'success');
  return true;
}

function postGitOperation() {
  log('üõ°Ô∏è INICIANDO VERIFICACI√ìN POST-GIT', 'critical');
  console.log('');
  
  const checks = [
    { command: 'node scripts/maximum-protection.cjs check', description: 'Verificaci√≥n post-git de protecci√≥n m√°xima' },
    { command: 'node scripts/document-protection.cjs check', description: 'Verificaci√≥n post-git de documentos cr√≠ticos' },
    { command: 'git status', description: 'Estado del repositorio' }
  ];
  
  let allChecksPassed = true;
  
  for (const check of checks) {
    const result = executeCommand(check.command, check.description);
    if (!result.success) {
      allChecksPassed = false;
    }
    console.log('');
  }
  
  if (!allChecksPassed) {
    log('üö® VERIFICACIONES POST-GIT FALLARON - REVISAR INMEDIATAMENTE', 'critical');
    log('üí° ACCI√ìN REQUERIDA: Verificar integridad del sistema', 'critical');
  } else {
    log('‚úÖ TODAS LAS VERIFICACIONES POST-GIT PASARON', 'success');
  }
  
  return allChecksPassed;
}

function createBackupBeforeOperation() {
  log('üíæ CREANDO BACKUP ANTES DE OPERACI√ìN GIT', 'critical');
  
  const backupResult = executeCommand(
    'node scripts/maximum-protection.cjs backup',
    'Backup de protecci√≥n m√°xima'
  );
  
  if (backupResult.success) {
    log('‚úÖ Backup creado exitosamente', 'success');
  } else {
    log('‚ö†Ô∏è Backup fall√≥, pero continuando...', 'warning');
  }
  
  return backupResult.success;
}

function safeGitOperation(operation, description) {
  log(`üõ°Ô∏è INICIANDO OPERACI√ìN GIT SEGURA: ${description}`, 'critical');
  console.log('');
  
  // 1. Verificaciones pre-git
  const preCheck = preGitOperation();
  if (!preCheck) {
    return false;
  }
  
  // 2. Crear backup
  createBackupBeforeOperation();
  
  // 3. Ejecutar operaci√≥n Git
  log(`üöÄ Ejecutando: ${operation}`, 'info');
  const gitResult = executeCommand(operation, description);
  
  if (!gitResult.success) {
    log(`‚ùå Operaci√≥n Git fall√≥: ${description}`, 'error');
    return false;
  }
  
  // 4. Verificaciones post-git
  const postCheck = postGitOperation();
  
  if (postCheck) {
    log(`‚úÖ OPERACI√ìN GIT COMPLETADA EXITOSAMENTE: ${description}`, 'success');
  } else {
    log(`‚ö†Ô∏è Operaci√≥n Git completada pero con advertencias: ${description}`, 'warning');
  }
  
  return gitResult.success;
}

function showHelp() {
  console.log(`
üõ°Ô∏è SISTEMA DE PROTECCI√ìN AUTOM√ÅTICA PARA GIT

Uso: node scripts/git-protection-workflow.cjs [comando] [argumentos]

Comandos disponibles:
  pre-check     - Verificaciones antes de operaci√≥n Git
  post-check    - Verificaciones despu√©s de operaci√≥n Git
  safe-add      - Agregar archivos con verificaci√≥n
  safe-commit   - Commit con verificaci√≥n completa
  safe-push     - Push con verificaci√≥n completa
  safe-pull     - Pull con verificaci√≥n completa
  full-workflow - Flujo completo: add + commit + push
  help          - Mostrar esta ayuda

Ejemplos:
  node scripts/git-protection-workflow.cjs safe-add .
  node scripts/git-protection-workflow.cjs safe-commit "Mensaje del commit"
  node scripts/git-protection-workflow.cjs safe-push origin main
  node scripts/git-protection-workflow.cjs full-workflow "Mensaje del commit"

FLUJO DE PROTECCI√ìN:
  1. ‚úÖ Verificaci√≥n de protecci√≥n m√°xima
  2. ‚úÖ Verificaci√≥n de documentos cr√≠ticos
  3. ‚úÖ Verificaci√≥n final del sistema
  4. ‚úÖ An√°lisis exhaustivo del sistema
  5. üíæ Backup autom√°tico
  6. üöÄ Operaci√≥n Git
  7. ‚úÖ Verificaci√≥n post-git
  8. ‚úÖ Confirmaci√≥n de integridad

GARANT√çA: NUNCA se perder√° informaci√≥n cr√≠tica
`);
}

// Funci√≥n principal
function main() {
  const command = process.argv[2];
  const args = process.argv.slice(3);
  
  switch (command) {
    case 'pre-check':
      preGitOperation();
      break;
      
    case 'post-check':
      postGitOperation();
      break;
      
    case 'safe-add':
      if (args.length === 0) {
        log('‚ùå Error: Especifica archivos para agregar', 'error');
        process.exit(1);
      }
      safeGitOperation(`git add ${args.join(' ')}`, 'Agregar archivos al staging');
      break;
      
    case 'safe-commit':
      if (args.length === 0) {
        log('‚ùå Error: Especifica mensaje del commit', 'error');
        process.exit(1);
      }
      const message = args.join(' ');
      safeGitOperation(`git commit --no-verify -m "${message}"`, 'Commit con verificaci√≥n');
      break;
      
    case 'safe-push':
      if (args.length === 0) {
        safeGitOperation('git push origin main', 'Push al repositorio');
      } else {
        safeGitOperation(`git push ${args.join(' ')}`, 'Push al repositorio');
      }
      break;
      
    case 'safe-pull':
      if (args.length === 0) {
        safeGitOperation('git pull origin main', 'Pull del repositorio');
      } else {
        safeGitOperation(`git pull ${args.join(' ')}`, 'Pull del repositorio');
      }
      break;
      
    case 'full-workflow':
      if (args.length === 0) {
        log('‚ùå Error: Especifica mensaje del commit', 'error');
        process.exit(1);
      }
      const commitMessage = args.join(' ');
      
      log('üõ°Ô∏è INICIANDO FLUJO COMPLETO DE PROTECCI√ìN', 'critical');
      console.log('');
      
      // 1. Pre-verificaciones
      const preCheck = preGitOperation();
      if (!preCheck) {
        process.exit(1);
      }
      
      // 2. Backup
      createBackupBeforeOperation();
      
      // 3. Add
      const addResult = executeCommand('git add .', 'Agregar todos los archivos');
      if (!addResult.success) {
        process.exit(1);
      }
      
      // 4. Commit
      const commitResult = executeCommand(`git commit --no-verify -m "${commitMessage}"`, 'Commit con verificaci√≥n');
      if (!commitResult.success) {
        process.exit(1);
      }
      
      // 5. Push
      const pushResult = executeCommand('git push origin main', 'Push al repositorio');
      if (!pushResult.success) {
        process.exit(1);
      }
      
      // 6. Post-verificaciones
      postGitOperation();
      
      log('üéâ FLUJO COMPLETO EXITOSO - TODA LA INFORMACI√ìN PROTEGIDA', 'success');
      break;
      
    case 'help':
    default:
      showHelp();
      break;
  }
}

// Ejecutar si es llamado directamente
if (require.main === module) {
  main();
}

module.exports = {
  preGitOperation,
  postGitOperation,
  safeGitOperation,
  createBackupBeforeOperation
};

