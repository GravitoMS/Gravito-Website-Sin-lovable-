const { createClient } = require('@supabase/supabase-js');

// Configuraci√≥n de Supabase
const supabaseUrl = 'https://expqwtvlinsudlbpjldf.supabase.co';
const supabaseAnonKey = 'sb_publishable_tML1Lcese9dSNerDU9Tuag_YQ82Vlqw';

const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function debugAuth() {
  console.log('üîç Debug completo del sistema de autenticaci√≥n...\n');

  try {
    // 1. Verificar conexi√≥n a Supabase
    console.log('1. Verificando conexi√≥n a Supabase...');
    const { data, error } = await supabase.from('admin_users').select('count').limit(1);
    if (error) {
      console.error('‚ùå Error de conexi√≥n:', error);
      return;
    }
    console.log('‚úÖ Conexi√≥n exitosa\n');

    // 2. Verificar usuarios en tabla admin_users
    console.log('2. Usuarios en tabla admin_users:');
    const { data: adminUsers, error: adminError } = await supabase
      .from('admin_users')
      .select('*');

    if (adminError) {
      console.error('‚ùå Error obteniendo usuarios admin:', adminError);
    } else {
      console.log(`‚úÖ ${adminUsers.length} usuarios admin encontrados:`);
      adminUsers.forEach(user => {
        console.log(`   - ${user.email} (ID: ${user.id}, Role: ${user.role})`);
      });
    }
    console.log('');

    // 3. Verificar configuraci√≥n de RLS
    console.log('3. Verificando pol√≠ticas RLS...');
    try {
      const { data: rlsTest, error: rlsError } = await supabase
        .from('admin_users')
        .select('*')
        .limit(1);
      
      if (rlsError) {
        console.log('‚ö†Ô∏è  Posible problema con RLS:', rlsError.message);
      } else {
        console.log('‚úÖ Pol√≠ticas RLS funcionando correctamente');
      }
    } catch (error) {
      console.log('‚ö†Ô∏è  Error verificando RLS:', error.message);
    }
    console.log('');

    // 4. Probar autenticaci√≥n
    console.log('4. Probando autenticaci√≥n...');
    const testUsers = [
      { email: 'admin@gravito.com', password: 'AdminGravito2025!' },
      { email: 'admin1@gravitoms.com', password: 'AdminGravito2025!' }
    ];

    for (const testUser of testUsers) {
      console.log(`   Probando ${testUser.email}...`);
      try {
        const { data: authData, error: authError } = await supabase.auth.signInWithPassword({
          email: testUser.email,
          password: testUser.password,
        });

        if (authError) {
          console.log(`   ‚ùå Error de login: ${authError.message}`);
        } else {
          console.log(`   ‚úÖ Login exitoso con ${testUser.email}`);
          console.log(`   User ID: ${authData.user.id}`);
          console.log(`   Email: ${authData.user.email}`);
          
          // Verificar si est√° en tabla admin_users
          const { data: adminData, error: adminCheckError } = await supabase
            .from('admin_users')
            .select('*')
            .eq('email', testUser.email)
            .single();
          
          if (adminCheckError) {
            console.log(`   ‚ö†Ô∏è  Usuario no encontrado en tabla admin_users`);
          } else {
            console.log(`   ‚úÖ Usuario confirmado como admin`);
          }
        }
      } catch (error) {
        console.log(`   ‚ùå Error inesperado: ${error.message}`);
      }
      console.log('');
    }

    // 5. Verificar configuraci√≥n del contexto
    console.log('5. Verificando configuraci√≥n del contexto...');
    console.log('‚úÖ Supabase URL configurada:', supabaseUrl);
    console.log('‚úÖ Supabase Anon Key configurada:', supabaseAnonKey ? 'S√ç' : 'NO');
    console.log('');

    // 6. Recomendaciones
    console.log('üìã RECOMENDACIONES:');
    console.log('1. Ve a Supabase > Authentication > Users');
    console.log('2. Verifica que los usuarios existen y est√°n confirmados');
    console.log('3. Verifica que las contrase√±as son correctas');
    console.log('4. Revisa la consola del navegador para errores espec√≠ficos');
    console.log('5. Si el problema persiste, verifica el orden de renderizado de componentes');
    console.log('');
    console.log('üîß Si el problema persiste:');
    console.log('1. Verifica que el AuthProvider est√° envolviendo correctamente la aplicaci√≥n');
    console.log('2. Verifica que no hay conflictos de hot reload');
    console.log('3. Verifica que el contexto se inicializa correctamente');
    console.log('4. Usa el hook useAuthSafe en lugar de useAuth para mayor robustez');

  } catch (error) {
    console.error('‚ùå Error general en debug:', error);
  }
}

debugAuth();
